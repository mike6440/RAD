%function RadiationReview(lat,lon,y1,j1,y2,j2)%=================================================================% function RadiationReview(lat,lon,y1,j1,y2,j2)%% performs ana analysis of clear sky conditions for% a period of time from (y1,j1) to (y2,j2).  Plots% graphs of sunrise, sunset, solar noon, and expected % daily insolation.% SOLARRADIANCE ASSUMES THE FOLLOWING:%  watvap=2 cm, p=1013 mb,  k1 =0.1,  k2=0.1, ozone=0% reynolds 000901% ====================================================================%TESTclear, lat=40.8708333; lon = -72.616667; y1=2000; j1 = 180; y2 = 2000; j2 = 183;clear, %lat=-65; lon = 100; y1=2000;   % approx ant00lat = 32; lon = -111;j1 = 121; y1 = 2001; y2=2001; j2 = 152;% MAKE INITIAL TIME SERIESj1 = round(j1);  j2 = round(j2);  % integer jdstzone = fix((lon+7.5)/15);  % time zoneix = find(lon < 0);if length(ix) > 0	tzone(ix) = tzone(ix) -1;endt1 = jdf2dt(y1,j1)-tzone/24;  t2 = jdf2dt(y2,j2)-tzone/24 + 1 - 1/1440;  %UTC timesdeltime = 10/1440;  % 10-min time spacingNpts = fix((t2-t1) ./ deltime) +1;t = ones(Npts,1);t = t1 + [0:Npts-1]' .* deltime;% EACH DAY DEFINED -- WORK IN LOCAL TIME[y,jf] = dt2jdf(t+tzone/24);jx = fix(jf);  tutc = (jf-jx)*24;ix = find(diff(jx)~=0);ix = [1; ix+1];% DEFINE EACH DAY IN THE SERIESyyyy = y(ix);j = jx(ix);[y,jf] = dt2jdf(t);jx = fix(jf);  tutc = (jf-jx)*24;% USE THIS CURVE TO COMPUTE THE DAILY CLEAR-SKY INSOLATIONsw = solarradiance(lat,lon,jx,tutc,2,1013, .1,.1,0);swav = nan*ones(length(j));fprintf('\nPROGRAM RadiationReview() -- run time %s\n',datestr(now));fprintf('Lat/lon = %.2f / %.2f.  All times are local daylight time.\n', lat, lon);fprintf('  DATE       JD     SWRAD    RISE       AZ       NOON      AZ      ZE         SET         AZ    DAY HRS\n');fprintf(' (noon)             W/m^2           \n');% COMPUTE THE DAILY AVERAGES FOR EACH JULIAN DAYfor i = 1:length(j)		[y,M,d] = datevec(jdf2dt(yyyy(i),j(i)));  % Local y,M,d		[tr,tn,ts] = apnoon(y,M,d,lat,lon);	% utc times of sunrise, sunset, and noon		% if tr == inf => tr set to local midnight	if tr == inf		tr = jdf2dt(yyyy(i),j(i)) - tzone/24;	end	% if ts == inf => set ts to local midnight	if ts == inf		ts = jdf2dt(yyyy(i),j(i)) - tzone/24 + 1;	end		% LOCAL TIMES	[yr,Mr,dr,hr,mr,sr] = datevec(tr+tzone/24);	[yn,Mn,dn,hn,mn,sn] = datevec(tn+tzone/24);	[ys,Ms,ds,hs,ms,ss] = datevec(ts+tzone/24);		% GET THE DATA, 30 min before sunrise and 30 min after sunset	%[dt, x] = GetLevel2_hr(drive, expstr, id, var, tr-30/1440, ts+60/1440);  % USE FOR HOURLY AVG FILES	ix = find(t >= tr & t <= ts);	x = sw(ix);	swav(i) = mean(x) .* (ts - tr);		% SOLAR ANGLES AT SUNRISE, NOON, AND SUNSET [az, ze, ze0] = Ephem(lat, lon, dt)	ar = ephem(lat,lon,tr);  	as = ephem(lat,lon,ts);	[an,zn] = ephem(lat,lon,tn);	tx = (tzone+1)/24;  % daylight savings time	tr=tr+tx;	tn = tn + tx;	ts = ts + tx;	if datenum(yr,Mr,dr) < datenum(yn,Mn,dn)		str=sprintf('%s %7.2f  %s(-) %5.1f    %s  [%5.1f, %5.1f]     %s     %5.1f     %.3f',...			dtstr(tn,'date') ,swav(i), dtstr(tr,'time'), ar,   dtstr(tn,'time'),an,zn,    dtstr(ts,'time'),as,  (ts-tr)*24);	elseif datenum(ys,Ms,ds) > datenum(yn,Mn,dn)		str=sprintf('%s %7.2f  %s    %5.1f    %s  [%5.1f, %5.1f]     %s(+)  %5.1f     %.3f',...			dtstr(tn,'date'),swav(i), dtstr(tr,'time'),   ar,  dtstr(tn,'time'),an,zn,   dtstr(sr,'time'),as,  (ts-tr)*24);	else		str=sprintf('%s %7.2f  %s    %5.1f    %s  [%5.1f, %5.1f]     %s     %5.1f     %.3f',...			dtstr(tn,'date'), swav(i), dtstr(tr,'time'),  ar,   dtstr(tn,'time'),  an, zn,   dtstr(ts,'time'), as,  (ts-tr)*24);	end	fprintf('%s\n',str);end